// Generated by CoffeeScript 1.12.7
(function() {
  var Cache, Roll, Room, User, app, express, fs, gettime, http, io, md5, moment, readline,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require("express");

  app = express();

  http = require("http").Server(app);

  io = require("socket.io")(http);

  fs = require("fs");

  md5 = require("md5");

  readline = require("readline");

  moment = require("moment");

  moment.locale("zh-cn");

  gettime = function() {
    return moment().format("YYYY-MM-DD HH:mm:ss");
  };

  Roll = (function() {
    Roll.prototype._roll = {};

    function Roll(_roll) {
      this._roll = _roll != null ? _roll : {};
    }

    Roll.prototype.insert = function(key, val) {
      if (!this._roll[key]) {
        return this._roll[key] = val;
      } else {
        return void 0;
      }
    };

    Roll.prototype.erase = function(key) {
      return delete this._roll[key];
    };

    Roll.prototype.get = function(key) {
      return this._roll[key];
    };

    Roll.prototype.exist = function(key, val) {
      return this._roll[key] && this._roll[key] === val;
    };

    return Roll;

  })();

  Cache = (function() {
    Cache.prototype._cache = [];

    function Cache(_cache) {
      this._cache = _cache != null ? _cache : [];
    }

    Cache.prototype.insert = function(data) {
      return this._cache.push(data);
    };

    Cache.prototype.erase = function(data) {
      var dt;
      return this._cache = (function() {
        var i, len, ref, results;
        ref = this._cache;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          dt = ref[i];
          if (dt !== data) {
            results.push(dt);
          }
        }
        return results;
      }).call(this);
    };

    Cache.prototype.exist = function(data) {
      return indexOf.call(this._cache, data) >= 0;
    };

    return Cache;

  })();

  User = (function() {
    function User() {}

    User.sockets = {};

    User.insert = function(name, socket) {
      return this.sockets[name].insert(socket);
    };

    User.erase = function(name, socket) {
      this.sockets[name].erase(socket);
      return socket != null ? typeof socket.disconnect === "function" ? socket.disconnect() : void 0 : void 0;
    };

    User.roll = new Roll();

    User.register = function(name, password) {
      var base;
      this.roll.insert(name, password);
      return (base = this.sockets)[name] != null ? base[name] : base[name] = new Cache();
    };

    User.unregister = function(name) {
      var i, len, ref, sck;
      if (this.sockets[name]) {
        ref = this.sockets[name]._cache;
        for (i = 0, len = ref.length; i < len; i++) {
          sck = ref[i];
          if (sck != null) {
            if (typeof sck.disconnect === "function") {
              sck.disconnect();
            }
          }
        }
      }
      return this.roll.erase(name);
    };

    User.exist = function(name, password) {
      return this.roll.exist(name, password);
    };

    return User;

  })();

  Room = (function() {
    function Room() {}

    Room.hist = {};

    Room.sockets = {};

    Room.roll = new Roll();

    Room.register = function(name, password) {
      this.roll.insert(name, password);
      return this.sockets[name] = new Cache();
    };

    Room.unregister = function(name) {
      var i, len, ref, sck;
      this.roll.erase(name);
      this.send(name, "sys", {
        time: gettime(),
        data: "the room " + name + " is unregistered"
      });
      ref = this.sockets[name]._cache;
      for (i = 0, len = ref.length; i < len; i++) {
        sck = ref[i];
        if (sck != null) {
          sck.isjoin = false;
        }
      }
      return delete this.sockets[name];
    };

    Room.exist = function(name, password) {
      return this.roll.exist(name, password);
    };

    Room.join = function(name, socket) {
      var key1, key2, ref, results, val1, val2;
      this.sockets[name].insert(socket);
      this.send(name, "sys", {
        time: gettime(),
        data: socket.username + " joined"
      });
      ref = this.hist[name];
      results = [];
      for (key1 in ref) {
        val1 = ref[key1];
        results.push((function() {
          var results1;
          results1 = [];
          for (key2 in val1) {
            val2 = val1[key2];
            if (val2.type === "text") {
              results1.push(socket.emit("new message", {
                username: socket.username,
                time: val2.time,
                ishist: true,
                data: ("" + val2.data).replace(/[<>&"]/g, function(c) {
                  return {
                    "<": "&lt;",
                    ">": "&gt;",
                    "&": "&amp;",
                    "\"": "&quot;"
                  }[c];
                })
              }));
            } else if (val2.type === "image") {
              results1.push(socket.emit("new image", {
                username: socket.username,
                time: val2.time,
                ishist: true,
                data: "" + val2.data
              }));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };

    Room.leave = function(name, socket) {
      socket.isjoin = false;
      this.sockets[name].erase(socket);
      return this.send(name, "sys", {
        time: gettime(),
        data: socket.username + " left"
      });
    };

    Room.send = function(name, ent, data) {
      var i, len, ref, results, sck;
      ref = this.sockets[name]._cache;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        sck = ref[i];
        results.push(sck != null ? typeof sck.emit === "function" ? sck.emit(ent, data) : void 0 : void 0);
      }
      return results;
    };

    Room.existUser = function(name, username) {
      var i, len, ref, sck;
      ref = this.sockets[name]._cache;
      for (i = 0, len = ref.length; i < len; i++) {
        sck = ref[i];
        if ((sck != null ? sck.username : void 0) === username) {
          return true;
        }
      }
      return false;
    };

    Room.insertHist = function(name, data) {
      var base, base1, name1;
      if ((base = this.hist)[name] == null) {
        base[name] = {};
      }
      if ((base1 = this.hist[name])[name1 = data.username] == null) {
        base1[name1] = [];
      }
      return this.hist[name][data.username].push(data);
    };

    Room.eraseHist = function(name, username) {
      var ref;
      return (ref = this.hist[name]) != null ? delete ref[username] : void 0;
    };

    Room.getCuruser = function(name) {
      var i, len, ref, results, sck;
      ref = this.sockets[name]._cache;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        sck = ref[i];
        results.push(sck.username);
      }
      return results;
    };

    Room.sendHist = function(name, username, socket) {
      var key1, key2, ref, results, val1, val2;
      ref = this.hist[name];
      results = [];
      for (key1 in ref) {
        val1 = ref[key1];
        results.push((function() {
          var results1;
          results1 = [];
          for (key2 in val1) {
            val2 = val1[key2];
            if (val2.type === "text") {
              results1.push(socket.emit("new message", {
                username: socket.username,
                time: val2.time,
                ishist: true,
                data: ("" + val2.data).replace(/[<>&"]/g, function(c) {
                  return {
                    "<": "&lt;",
                    ">": "&gt;",
                    "&": "&amp;",
                    "\"": "&quot;"
                  }[c];
                })
              }));
            } else if (val2.type === "image") {
              results1.push(socket.emit("new image", {
                username: socket.username,
                time: val2.time,
                ishist: true,
                data: "" + val2.data
              }));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };

    return Room;

  })();

  io.on("connection", function(socket) {
    socket.on("login", function(data) {
      if (!socket.islogin) {
        if (User.exist(data.username, data.password)) {
          User.insert(data.username, socket);
          socket.username = data.username;
          socket.password = data.password;
          socket.islogin = true;
          return socket.emit("sys", {
            time: gettime(),
            data: "login succeeded"
          });
        } else {
          return socket.emit("sys", {
            time: gettime(),
            data: "login failed"
          });
        }
      } else {
        return socket.emit("sys", {
          time: gettime(),
          data: "has been logined"
        });
      }
    });
    socket.on("join", function(data) {
      if (socket.islogin) {
        if (Room.exist(data.roomname, data.roompassword)) {
          Room.join(data.roomname, socket);
          socket.roomname = data.roomname;
          socket.roompassword = data.roompassword;
          socket.isjoin = true;
          return socket.emit("sys", {
            time: gettime(),
            data: "join succeeded"
          });
        } else {
          return socket.emit("sys", {
            time: gettime(),
            data: "join failed"
          });
        }
      } else {
        return socket.emit("sys", {
          time: gettime(),
          data: "please login first"
        });
      }
    });
    socket.on("message", function(data) {
      var dt, ishist, time, type;
      data.username = socket.username;
      data.time = gettime();
      type = data.type;
      dt = data.data;
      ishist = data.ishist;
      time = data.time;
      if (socket.islogin) {
        if (socket.isjoin) {
          if (("" + dt) !== "") {
            if (type === "text") {
              Room.send(socket.roomname, "new message", {
                username: socket.username,
                time: time,
                ishist: ishist,
                data: ("" + dt).replace(/[<>&"]/g, function(c) {
                  return {
                    "<": "&lt;",
                    ">": "&gt;",
                    "&": "&amp;",
                    "\"": "&quot;"
                  }[c];
                })
              });
            } else if (type === "image") {
              Room.send(socket.roomname, "new image", {
                username: socket.username,
                time: time,
                ishist: ishist,
                data: "" + dt
              });
            }
            if (ishist) {
              return Room.insertHist(socket.roomname, data);
            }
          } else {
            return socket.emit("sys", {
              time: time,
              data: "please input something"
            });
          }
        } else {
          return socket.emit("sys", {
            time: time,
            data: "please join first"
          });
        }
      } else {
        return socket.emit("sys", {
          time: time,
          data: "please login first"
        });
      }
    });
    socket.on("eraseHist", function() {
      if (socket.islogin) {
        if (socket.isjoin) {
          Room.eraseHist(socket.roomname, socket.username);
          return socket.emit("sys", {
            time: time,
            data: "hist erased succeeded"
          });
        } else {
          return socket.emit("sys", {
            time: time,
            data: "please join first"
          });
        }
      } else {
        return socket.emit("sys", {
          time: time,
          data: "please login first"
        });
      }
    });
    socket.on("leave", function() {
      if (socket.islogin && socket.isjoin) {
        Room.leave(socket.roomname, socket);
      }
      return socket.emit("sys", {
        time: gettime(),
        data: "left room " + socket.roomname
      });
    });
    socket.on("logout", function() {
      return socket.disconnect();
    });
    socket.on("info", function(data) {
      var i, len, ref, results, username;
      if (socket.islogin) {
        if (socket.isjoin) {
          switch (data.data) {
            case "curuser":
              ref = Room.getCuruser(socket.roomname);
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                username = ref[i];
                results.push(socket.emit("sys", {
                  time: gettime(),
                  data: username + " is online"
                }));
              }
              return results;
              break;
            case "me":
              return socket.emit("sys", {
                time: gettime(),
                data: "i am " + socket.username
              });
            case "room":
              return socket.emit("sys", {
                time: gettime(),
                data: "i am in " + socket.roomname
              });
            case "leftmsg":
              return Room.sendHist(socket.roomname, socket.username, socket);
            default:
              return socket.emit("sys", {
                time: gettime(),
                data: "command not found: /info " + data.data
              });
          }
        } else {
          return socket.emit("sys", {
            time: time,
            data: "please join first"
          });
        }
      } else {
        return socket.emit("sys", {
          time: time,
          data: "please login first"
        });
      }
    });
    return socket.on("disconnect", function() {
      if (socket.islogin) {
        if (socket.isjoin) {
          Room.leave(socket.roomname, socket);
        }
        return User.erase(socket.username, socket);
      }
    });
  });

  readline.createInterface({
    input: fs.createReadStream("config.txt")
  }).on("line", function(line) {
    var name, password, ref, type;
    ref = line.split(" "), type = ref[0], name = ref[1], password = ref[2];
    if (type === "user") {
      return User.register(name, password);
    } else if (type === "room") {
      return Room.register(name, password);
    }
  }).on("close", function() {
    app.use("/", express["static"](__dirname + "/TinyChat"));
    return http.listen(2333, function() {
      return console.log("listening on port 2333");
    });
  });

}).call(this);
