// Generated by CoffeeScript 1.12.7
(function() {
  var Cache, Roll, Room, User, app, db, db_name, e, exit, express, fs, gettime, http, io, md5, moment, readline, tcdb,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require("express");

  app = express();

  http = require("http").Server(app);

  io = require("socket.io")(http);

  fs = require("fs");

  md5 = require("md5");

  readline = require("readline");

  tcdb = require("./tcdb.js");

  moment = require("moment");

  moment.locale("zh-cn");

  gettime = function() {
    return moment().format("YYYY-MM-DD HH:mm:ss");
  };

  tcdb.database.MAX_INSERT_COUNTER = 5;

  tcdb.database.MAX_REMOVE_COUNTER = 5;

  tcdb.database.MAX_UPDATE_COUNTER = 5;

  db = tcdb.make();

  db_name = "db_tc";

  Roll = (function() {
    Roll.prototype._roll = {};

    function Roll(_roll) {
      this._roll = _roll != null ? _roll : {};
    }

    Roll.prototype.insert = function(key, val) {
      if (!this._roll[key]) {
        return this._roll[key] = val;
      } else {
        return void 0;
      }
    };

    Roll.prototype.erase = function(key) {
      return delete this._roll[key];
    };

    Roll.prototype.get = function(key) {
      return this._roll[key];
    };

    Roll.prototype.exist = function(key, val) {
      return this._roll[key] && this._roll[key] === val;
    };

    return Roll;

  })();

  Cache = (function() {
    Cache.prototype._cache = [];

    function Cache(_cache) {
      this._cache = _cache != null ? _cache : [];
    }

    Cache.prototype.insert = function(data) {
      return this._cache.push(data);
    };

    Cache.prototype.erase = function(data) {
      var dt;
      return this._cache = (function() {
        var i, len, ref, results;
        ref = this._cache;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          dt = ref[i];
          if (dt !== data) {
            results.push(dt);
          }
        }
        return results;
      }).call(this);
    };

    Cache.prototype.exist = function(data) {
      return indexOf.call(this._cache, data) >= 0;
    };

    return Cache;

  })();

  User = (function() {
    function User() {}

    User.sockets = {};

    User.insert = function(name, socket) {
      return this.sockets[name].insert(socket);
    };

    User.erase = function(name, socket) {
      this.sockets[name].erase(socket);
      return socket != null ? typeof socket.disconnect === "function" ? socket.disconnect() : void 0 : void 0;
    };

    User.roll = new Roll();

    User.register = function(name, password) {
      var base;
      db.insert(tcdb.mkline("password", password, "user", name));
      this.roll.insert(name, password);
      return (base = this.sockets)[name] != null ? base[name] : base[name] = new Cache();
    };

    User.unregister = function(name) {
      var i, len, ref, sck;
      db_remove(tcdb.mkline(name, 0, "user"), function() {
        return true;
      });
      if (this.sockets[name]) {
        ref = this.sockets[name]._cache;
        for (i = 0, len = ref.length; i < len; i++) {
          sck = ref[i];
          if (sck != null) {
            if (typeof sck.disconnect === "function") {
              sck.disconnect();
            }
          }
        }
      }
      return this.roll.erase(name);
    };

    User.exist = function(name, password) {
      return this.roll.exist(name, password);
    };

    return User;

  })();

  Room = (function() {
    function Room() {}

    Room.sockets = {};

    Room.roll = new Roll();

    Room.register = function(name, password) {
      db.insert(tcdb.mkline("roompass", password, "room", name));
      db.update(tcdb.mkline("id_cnt", 0, "room", name, "message"), function(id_cnt) {
        return id_cnt || 0;
      });
      this.roll.insert(name, password);
      return this.sockets[name] = new Cache();
    };

    Room.unregister = function(name) {
      var i, len, ref, sck;
      db_remove(tcdb.mkline(name, 0, "room"), function() {
        return true;
      });
      this.roll.erase(name);
      this.send(name, "sys message", {
        time: gettime(),
        msg: "房间 " + name + " 已被注销"
      });
      ref = this.sockets[name]._cache;
      for (i = 0, len = ref.length; i < len; i++) {
        sck = ref[i];
        if (sck != null) {
          sck.isjoin = false;
        }
      }
      return delete this.sockets[name];
    };

    Room.exist = function(name, password) {
      return this.roll.exist(name, password);
    };

    Room.join = function(name, socket) {
      var cc, curid, i, key, lastseeid, len, obj, res, tmp, tmp2;
      lastseeid = (db.select(tcdb.mkline("lastseeid", 0, "room", name, "joined", socket.username), function() {
        return true;
      }))[0].lastseeid || 0;
      res = [];
      tmp = (db.select(tcdb.mkline("message", 0, "room", name), function() {
        return true;
      }))[0].message;
      for (key in tmp) {
        if (key !== "id_cnt" && lastseeid <= parseInt(key.slice(3)) + 20) {
          tmp2 = {};
          tmp2[key] = tmp[key];
          res.push(tmp2);
        }
      }
      for (i = 0, len = res.length; i < len; i++) {
        obj = res[i];
        cc = "";
        for (key in obj) {
          cc = key;
        }
        socket.emit("new message", {
          username: obj[cc].sender,
          time: obj[cc].time,
          msg: obj[cc].text
        });
      }
      curid = (db.select(tcdb.mkline("id_cnt", 0, "room", name, "message"), function() {
        return true;
      }))[0].id_cnt;
      db.update(tcdb.mkline("lastseeid", 0, "room", name, "joined", socket.username), function(lastseeid) {
        return lastseeid || curid;
      });
      this.sockets[name].insert(socket);
      return this.send(name, "sys message", {
        time: gettime(),
        msg: socket.username + " 加入房间"
      });
    };

    Room.leave = function(name, socket) {
      socket.isjoin = false;
      this.sockets[name].erase(socket);
      return this.send(name, "sys message", {
        time: gettime(),
        msg: socket.username + " 离开房间"
      });
    };

    Room.send = function(name, ent, data) {
      var i, len, ref, results, sck;
      ref = this.sockets[name]._cache;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        sck = ref[i];
        results.push(sck != null ? typeof sck.emit === "function" ? sck.emit(ent, data) : void 0 : void 0);
      }
      return results;
    };

    return Room;

  })();

  io.on("connection", function(socket) {
    socket.on("login", function(data) {
      var time;
      time = gettime();
      if (!socket.islogin) {
        if (User.exist(data.username, data.password)) {
          User.insert(data.username, socket);
          socket.username = data.username;
          socket.password = data.password;
          socket.islogin = true;
          return socket.emit("login suc");
        } else {
          return socket.emit("err", {
            time: time,
            msg: "登录失败"
          });
        }
      } else {
        return socket.emit("err", {
          time: time,
          msg: "已经登录"
        });
      }
    });
    socket.on("join", function(data) {
      var time;
      time = gettime();
      if (socket.islogin) {
        if (Room.exist(data.roomname, data.roompass)) {
          socket.emit("join suc");
          Room.join(data.roomname, socket);
          socket.roomname = data.roomname;
          socket.roompass = data.roompass;
          return socket.isjoin = true;
        } else {
          return socket.emit("err", {
            time: time,
            msg: "加入房间失败"
          });
        }
      } else {
        return socket.emit("err", {
          time: time,
          msg: "请先登录"
        });
      }
    });
    socket.on("message", function(data) {
      var curid, dt, time;
      dt = data.msg;
      time = gettime();
      if (socket.islogin) {
        if (socket.isjoin) {
          if (("" + dt) !== "") {
            curid = (db.update(tcdb.mkline("id_cnt", 0, "room", socket.roomname, "message"), function(id) {
              return id + 1;
            }))[0];
            db.update(tcdb.mkline("id_" + curid, 0, "room", socket.roomname, "message"), function(lastseeid) {
              return {
                sender: socket.username,
                time: time,
                text: "" + dt
              };
            });
            db.update(tcdb.mkline("lastseeid", 0, "room", socket.roomname, "joined", socket.username), function(lastseeid) {
              return curid;
            });
            return Room.send(socket.roomname, "new message", {
              username: socket.username,
              time: time,
              msg: "" + dt
            });
          } else {
            return socket.emit("err", {
              time: time,
              msg: "输入不能为空"
            });
          }
        } else {
          return socket.emit("err", {
            time: time,
            msg: "请先加入房间"
          });
        }
      } else {
        return socket.emit("err", {
          time: time,
          msg: "请先登录"
        });
      }
    });
    return socket.on("disconnect", function() {
      if (socket.islogin) {
        if (socket.isjoin) {
          Room.leave(socket.roomname, socket);
        }
        return User.erase(socket.username, socket);
      }
    });
  });

  exit = function() {
    db.close();
    return process.exit(0);
  };


  /* 初始化 */

  try {
    db.connect(db_name);
    readline.createInterface({
      input: fs.createReadStream("config.txt")
    }).on("line", function(line) {
      var name, password, ref, type;
      ref = line.split(" "), type = ref[0], name = ref[1], password = ref[2];
      if (type === "user") {
        return User.register(name, password);
      } else if (type === "room") {
        return Room.register(name, password);
      }
    }).on("close", function() {
      readline.createInterface({
        input: process.stdin
      }).on("line", function(line) {
        var e;
        try {
          return console.log(eval(line));
        } catch (error) {
          e = error;
          return console.log(e);
        }
      });
      app.use("/", express["static"](__dirname + "/TinyChat"));
      return http.listen(8080, function() {
        return console.log("listening on port 8080");
      });
    });
  } catch (error) {
    e = error;
    console.log("初始化是产生错误: " + e);
  }

}).call(this);
